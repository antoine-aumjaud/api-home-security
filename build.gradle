plugins {
    id 'org.springframework.boot' version '1.5.4.RELEASE'
}
apply plugin: 'java'
apply plugin: 'eclipse'

version = '1.1.1'
def apiJavalibVersion = '1.7.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
	flatDir {
    	dirs 'lib'
    }
}

def apiJavalibFile = new File(projectDir.getAbsolutePath() + '/lib/api-javalib-' + apiJavalibVersion + '.jar')
if (!apiJavalibFile.exists()) {
    new URL("https://github.com/antoine-aumjaud/api-javalib/releases/download/v${apiJavalibVersion}/api-javalib-${apiJavalibVersion}.jar")
    	.withInputStream { is -> apiJavalibFile.withOutputStream{ it << is }}
}

configurations {
//    compile.exclude module: "spring-boot-starter-tomcat" //remove tomcat, use jetty
}


dependencies {
	compile name: 'api-javalib', version: apiJavalibVersion
	//Transitive dependencies
    compile 'org.slf4j:slf4j-api:1.7.25'
	compile 'com.google.code.gson:gson:2.8.0'
	compile 'org.bouncycastle:bcpkix-jdk15on:1.52'
      //Spring boot
    compile('org.springframework.boot:spring-boot-starter-web') {
    	exclude group: 'ch.qos.logback:' //old version
	}
    //do not use jetty becasue it's not allow not valid URL with % (send by synology SMS notification)
    //compile 'org.springframework.boot:spring-boot-starter-jetty' //use jetty

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    //Other
    runtime 'ch.qos.logback:logback-classic:1.2.3'
	testCompile 'junit:junit:4.12'
}

processResources {
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        "application.name": project.property("name"),
        "application.version": project.property("version"),
        "build.date": new Date().format('yyyy-MM-dd HH:mm:ss')
    ]
}

jar {
    baseName =  project.property("name")
    version =   project.property("version")
}

task copyConfig(type: Copy) {
    description = "Copy config file for bootRun tasks"
    from(file('src/dist/conf/'))
    into("$buildDir/resources/main/")
}
bootRun { dependsOn copyConfig } 
//add dist config only when task bootRun is executed

bootRepackage {
    mainClass = 'fr.aumjaud.antoine.services.home.security.LaunchServer'
}

springBoot {
    layout = "ZIP" 
    //to add folder in classpath
    //see https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html#build-tool-plugins-gradle-configuration-layouts
}